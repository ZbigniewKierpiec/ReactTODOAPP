{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","handleText","e","setState","target","value","handleCheckbox","handleDate","handleClick","console","log","length","props","add","maxDate","this","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","task","active","important","finishDate","style","color","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","sort","a","b","toLowerCase","activeTasks","map","key","doneTasks","fontSize","App","counter","deleteTask","changeTaskStatus","Array","from","forEach","getTime","addTask","prevState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6RAkFeA,G,kNA/EbC,SAAU,IAAIC,MAAOC,cAAcC,MAAM,EAAG,I,EAC5CC,MAAQ,CACNC,KAAM,GACNC,SAAS,EACTC,KAAM,EAAKP,S,EAGbQ,WAAa,SAACC,GACZ,EAAKC,SAAS,CACZL,KAAMI,EAAEE,OAAOC,S,EAInBC,eAAiB,SAACJ,GAChB,EAAKC,SAAS,CACZJ,QAASG,EAAEE,OAAOL,W,EAItBQ,WAAa,SAACL,GACZ,EAAKC,SAAS,CACZH,KAAME,EAAEE,OAAOC,S,EAInBG,YAAc,WACZC,QAAQC,IAAI,SADM,MAGc,EAAKb,MAA7BC,EAHU,EAGVA,KAAMC,EAHI,EAGJA,QAASC,EAHL,EAGKA,KACnBF,EAAKa,OAAS,EACJ,EAAKC,MAAMC,IAAIf,EAAME,EAAMD,IAErC,EAAKI,SAAS,CACZL,KAAM,GACNC,SAAS,EACTC,KAAM,EAAKP,UAIfgB,QAAQC,IAAI,iB,uDAKd,IAAII,EAAqC,EAA3BC,KAAKtB,QAAQG,MAAM,EAAG,GAAS,EAI7C,OAFAkB,GAAoB,SAGlB,yBAAKE,UAAU,QACb,2BACEC,KAAK,OACLC,YAAY,YACZb,MAAOU,KAAKlB,MAAMC,KAClBqB,SAAUJ,KAAKd,aAEjB,2BACEgB,KAAK,WACLlB,QAASgB,KAAKlB,MAAME,QACpBqB,GAAG,YACHD,SAAUJ,KAAKT,iBAEjB,2BAAOe,QAAQ,aAAf,YACA,6BACA,2BAAOA,QAAQ,QAAf,mBACA,2BACEJ,KAAK,OACLZ,MAAOU,KAAKlB,MAAMG,KAClBsB,IAAKP,KAAKtB,QACV8B,IAAKT,EACLK,SAAUJ,KAAKR,aAEjB,6BACA,4BAAQiB,QAAST,KAAKP,aAAtB,Y,GA1EciB,cCiCPC,EAjCF,SAACd,GACZ,IADsB,EAKoCA,EAAMe,KAAxD7B,EALc,EAKdA,KAAME,EALQ,EAKRA,KAAMoB,EALE,EAKFA,GAAIQ,EALF,EAKEA,OAAQC,EALV,EAKUA,UAAWC,EALrB,EAKqBA,WAE3C,GAAIF,EACF,OACE,6BACE,2BACE,4BAAQG,MAAOF,EAVT,CACZG,MAAO,OASkC,MAAOlC,GAD5C,QACgE,IAC9D,8BAAOE,EAAP,KACA,4BAAQwB,QAAS,kBAAMZ,EAAMqB,OAAOb,KAApC,eACA,4BAAQI,QAAS,kBAAMZ,EAAMsB,OAAOd,KAApC,OAKN,IAAMe,EAAS,IAAIzC,KAAKoC,GAAYM,iBACpC,OACE,6BACE,2BACE,gCAAStC,GACT,uCAAaE,EAAb,KACA,6BAHF,iCAGsC,kCAAQmC,GAC5C,4BAAQX,QAAS,kBAAMZ,EAAMsB,OAAOd,KAApC,QC+CKiB,EAxEE,SAACzB,GAChB,IAAMgB,EAAShB,EAAM0B,MAAMC,QAAO,SAACZ,GAAD,OAAUA,EAAKC,UAC3CY,EAAO5B,EAAM0B,MAAMC,QAAO,SAACZ,GAAD,OAAWA,EAAKC,UAI5CY,EAAK7B,QAAU,GACjB6B,EAAKC,MAAK,SAACC,EAAGC,GACZ,OAAID,EAAEZ,WAAaa,EAAEb,WACZ,EAELY,EAAEZ,WAAaa,EAAEb,YACX,EAEH,KAGPF,EAAOjB,QAAU,GACnBiB,EAAOa,MAAK,SAACC,EAAGC,GAId,OAHAD,EAAIA,EAAE5C,KAAK8C,gBACXD,EAAIA,EAAE7C,KAAK8C,gBAEQ,EACfF,EAAIC,EAAU,EACX,KAKX,IAAME,EAAcjB,EAAOkB,KAAI,SAACnB,GAAD,OAC7B,kBAAC,EAAD,CACEoB,IAAKpB,EAAKP,GACVO,KAAMA,EACNO,OAAQtB,EAAMsB,OACdD,OAAQrB,EAAMqB,YAGZe,EAAYR,EAAKM,KAAI,SAACnB,GAAD,OACzB,kBAAC,EAAD,CACEoB,IAAKpB,EAAKP,GACVO,KAAMA,EACNO,OAAQtB,EAAMsB,OACdD,OAAQrB,EAAMqB,YAIlB,OACE,oCACE,yBAAKjB,UAAU,UACb,gDACC6B,EAAYlC,OAAS,EACpBkC,EAEA,mEAIJ,6BAEA,yBAAK7B,UAAU,QACb,0CACa,gCAAMwB,EAAK7B,OAAX,MAEZ6B,EAAK7B,OAAS,GACb,0BAAMoB,MAAO,CAAEkB,SAAU,KAAzB,iCAEDD,EAAUpD,MAAM,EAAG,MCgFbsD,G,kNA/IbC,QAAU,E,EACVtD,MAAQ,CACNyC,MAAO,CACL,CACElB,GAAI,EACJtB,KAAM,gCACNE,KAAM,aACN6B,WAAW,EACXD,QAAQ,EACRE,WAAY,MAEd,CACEV,GAAI,EACJtB,KAAM,iBACNE,KAAM,aACN6B,WAAW,EACXD,QAAQ,EACRE,WAAY,MAEd,CACEV,GAAI,EACJtB,KAAM,iBACNE,KAAM,aACN6B,WAAW,EACXD,QAAQ,EACRE,WAAY,MAEd,CACEV,GAAI,EACJtB,KAAM,sBACNE,KAAM,aACN6B,WAAW,EACXD,QAAQ,EACRE,WAAY,MAEd,CACEV,GAAI,EACJtB,KAAM,wCACNE,KAAM,aACN6B,WAAW,EACXD,QAAQ,EACRE,WAAY,MAEd,CACEV,GAAI,EACJtB,KAAM,oBACNE,KAAM,aACN6B,WAAW,EACXD,QAAQ,EACRE,WAAY,MAEd,CACEV,GAAI,EACJtB,KAAM,iBACNE,KAAM,aACN6B,WAAW,EACXD,QAAQ,EACRE,WAAY,MAEd,CACEV,GAAI,EACJtB,KAAM,mDACNE,KAAM,aACN6B,WAAW,EACXD,QAAQ,EACRE,WAAY,MAEd,CACEV,GAAI,EACJtB,KAAM,sBACNE,KAAM,aACN6B,WAAW,EACXD,QAAQ,EACRE,WAAY,Q,EAKlBsB,WAAa,SAAChC,GACZX,QAAQC,IAAI,wBAA0BU,GAQtC,IAAIkB,EAAK,YAAO,EAAKzC,MAAMyC,OAC3BA,EAAQA,EAAMC,QAAO,SAACZ,GAAD,OAAUA,EAAKP,KAAOA,KAC3C,EAAKjB,SAAS,CACZmC,W,EAIJe,iBAAmB,SAACjC,GAClBX,QAAQC,IAAI,iCAAmCU,GAC/C,IAAMkB,EAAQgB,MAAMC,KAAK,EAAK1D,MAAMyC,OACpCA,EAAMkB,SAAQ,SAAC7B,GACTA,EAAKP,KAAOA,IACdO,EAAKC,QAAS,EACdD,EAAKG,YAAa,IAAIpC,MAAO+D,cAGjC,EAAKtD,SAAS,CACZmC,W,EAIJoB,QAAU,SAAC5D,EAAME,EAAM6B,GAErB,IAAMF,EAAO,CACXP,GAAI,EAAK+B,QACTrD,OACAE,OACA6B,YACAD,QAAQ,EACRE,WAAY,MASd,OAPA,EAAKqB,UACL1C,QAAQC,IAAIiB,EAAM,EAAKwB,SAEvB,EAAKhD,UAAS,SAACwD,GAAD,MAAgB,CAC5BrB,MAAM,GAAD,mBAAMqB,EAAUrB,OAAhB,CAAuBX,SAGvB,G,uDAIP,OACE,yBAAKX,UAAU,OACb,yCACA,kBAAC,EAAD,CAASH,IAAKE,KAAK2C,UACnB,kBAAC,EAAD,CACEpB,MAAOvB,KAAKlB,MAAMyC,MAClBJ,OAAQnB,KAAKqC,WACbnB,OAAQlB,KAAKsC,wB,GAzIL5B,cCOEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpE,QAAQoE,MAAMA,EAAMC,c","file":"static/js/main.7edd2238.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./AddTask.css\";\r\nclass AddTask extends Component {\r\n  minDate = new Date().toISOString().slice(0, 10);\r\n  state = {\r\n    text: \"\",\r\n    checked: false,\r\n    date: this.minDate,\r\n  };\r\n\r\n  handleText = (e) => {\r\n    this.setState({\r\n      text: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleCheckbox = (e) => {\r\n    this.setState({\r\n      checked: e.target.checked,\r\n    });\r\n  };\r\n\r\n  handleDate = (e) => {\r\n    this.setState({\r\n      date: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleClick = () => {\r\n    console.log(\"dodaj\");\r\n\r\n    const { text, checked, date } = this.state;\r\n    if (text.length > 2) {\r\n      const add = this.props.add(text, date, checked);\r\n      if (add) {\r\n        this.setState({\r\n          text: \"\",\r\n          checked: false,\r\n          date: this.minDate,\r\n        });\r\n      }\r\n    } else {\r\n      console.log(\"za kr√≥tko\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n    // console.log(maxDate);\r\n    maxDate = maxDate + \"-12-31\";\r\n\r\n    return (\r\n      <div className=\"form\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Add To-Do\"\r\n          value={this.state.text}\r\n          onChange={this.handleText}\r\n        />\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={this.state.checked}\r\n          id=\"important\"\r\n          onChange={this.handleCheckbox}\r\n        />\r\n        <label htmlFor=\"important\">Priority</label>\r\n        <br />\r\n        <label htmlFor=\"date\">Do a data entry</label>\r\n        <input\r\n          type=\"date\"\r\n          value={this.state.date}\r\n          min={this.minDate}\r\n          max={maxDate}\r\n          onChange={this.handleDate}\r\n        />\r\n        <br />\r\n        <button onClick={this.handleClick}>ADD</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;\r\n","import React from \"react\";\r\n\r\nconst Task = (props) => {\r\n  const style = {\r\n    color: \"red\",\r\n  };\r\n\r\n  const { text, date, id, active, important, finishDate } = props.task;\r\n\r\n  if (active) {\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong style={important ? style : null}>{text}</strong> - to{\" \"}\r\n          <span>{date} </span>\r\n          <button onClick={() => props.change(id)}>It was done</button>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    const finish = new Date(finishDate).toLocaleString();\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong>{text}</strong>\r\n          <em> (do to {date})</em>\r\n          <br />- confirmation of performance <span> {finish}</span>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nconst TaskList = (props) => {\r\n  const active = props.tasks.filter((task) => task.active);\r\n  const done = props.tasks.filter((task) => !task.active);\r\n\r\n  // done.sort((a, b) => b.finishDate - a.finishDate)\r\n\r\n  if (done.length >= 2) {\r\n    done.sort((a, b) => {\r\n      if (a.finishDate < b.finishDate) {\r\n        return 1;\r\n      }\r\n      if (a.finishDate > b.finishDate) {\r\n        return -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n  if (active.length >= 2) {\r\n    active.sort((a, b) => {\r\n      a = a.text.toLowerCase();\r\n      b = b.text.toLowerCase();\r\n\r\n      if (a < b) return -1;\r\n      if (a > b) return 1;\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  // console.log(active, done);\r\n  const activeTasks = active.map((task) => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n  const doneTasks = done.map((task) => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <div className=\"active\">\r\n        <h1>Tasks to be done</h1>\r\n        {activeTasks.length > 0 ? (\r\n          activeTasks\r\n        ) : (\r\n          <p>No tasks to do , you are Happy man!</p>\r\n        )}\r\n      </div>\r\n\r\n      <hr />\r\n\r\n      <div className=\"done\">\r\n        <h3>\r\n          Tasks done <em>({done.length})</em>\r\n        </h3>\r\n        {done.length > 5 && (\r\n          <span style={{ fontSize: 10 }}>Displaying only 5 last task's</span>\r\n        )}\r\n        {doneTasks.slice(0, 5)}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { Component } from \"react\";\nimport AddTask from \"./AddTask\";\nimport TaskList from \"./TaskList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  counter = 9;\n  state = {\n    tasks: [\n      {\n        id: 0,\n        text: \"Finally to play The Witcher 3\",\n        date: \"2018-02-15\",\n        important: true,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 1,\n        text: \"do a good deed\",\n        date: \"2020-11-12\",\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 2,\n        text: \"paint our home\",\n        date: \"2019-09-11\",\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 3,\n        text: \"lose weight at home\",\n        date: \"2019-05-20\",\n        important: true,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 4,\n        text: \"Find a new job as a web developer ;-)\",\n        date: \"2020-11-12\",\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 5,\n        text: \"go for a holliday\",\n        date: \"2019-09-11\",\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 6,\n        text: \"hairdresser!!!\",\n        date: \"2019-05-20\",\n        important: true,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 7,\n        text: \"do not receive the referral from the bailiff :-)\",\n        date: \"2020-11-12\",\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 8,\n        text: \"to buy a new laptop\",\n        date: \"2019-09-11\",\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n    ],\n  };\n\n  deleteTask = (id) => {\n    console.log(\"delete elementu o id \" + id);\n    // const tasks = [...this.state.tasks];\n    // const index = tasks.findIndex(task => task.id === id);\n    // tasks.splice(index, 1);\n    // this.setState({\n    //   tasks\n    // })\n\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter((task) => task.id !== id);\n    this.setState({\n      tasks,\n    });\n  };\n\n  changeTaskStatus = (id) => {\n    console.log(\"change w stanie elementu o id \" + id);\n    const tasks = Array.from(this.state.tasks);\n    tasks.forEach((task) => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    });\n    this.setState({\n      tasks,\n    });\n  };\n\n  addTask = (text, date, important) => {\n    // console.log(\"dodany obiekt\");\n    const task = {\n      id: this.counter,\n      text, // tekst z inputa\n      date, //tekst z inputa\n      important, //warto≈õƒá z inputa\n      active: true,\n      finishDate: null,\n    };\n    this.counter++;\n    console.log(task, this.counter);\n\n    this.setState((prevState) => ({\n      tasks: [...prevState.tasks, task],\n    }));\n\n    return true;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>TO DO APP</h1>\n        <AddTask add={this.addTask} />\n        <TaskList\n          tasks={this.state.tasks}\n          delete={this.deleteTask}\n          change={this.changeTaskStatus}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}